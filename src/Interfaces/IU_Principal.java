/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaces;

import Classes_Usadas.Imagem;
import Classes_Usadas.ImagemPGM;
import Classes_Usadas.ImagemPPM;
import Controlador.Controlador;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author DIELME
 */
public class IU_Principal extends javax.swing.JFrame {

    /**
     * Creates new form IU_Principal
     */
    public IU_Principal() {

        initComponents();

        this.setTitle("Sistema TCC II - Dielme Ramos Gomes ");

        this.Menu_Editar.setEnabled(false);
    }

    static Controlador control = new Controlador();

    Imagem imagem = new Imagem();
    Imagem imagemOriginal = new Imagem();
    int posicao;
    int extrair_posicao;
    int op = 0;
    String arquivo_extrair_mensagem;
    JFileChooser chooserArquivo1;
    String caminho1;
    String tipo1;

    //String vetPos[] = {"posição 1", "posição 2", "posição 3", "posição 4", "posição 5", "posição 6"};
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Painel_01 = new javax.swing.JPanel();
        ScrollPane_Original = new javax.swing.JScrollPane();
        JL_Image1 = new javax.swing.JLabel();
        ScrollPane_Copia = new javax.swing.JScrollPane();
        JL_Image2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        Menu_Arquivo = new javax.swing.JMenu();
        MenuItem_Abrir = new javax.swing.JMenuItem();
        MenuItem_Salvar = new javax.swing.JMenuItem();
        Menu_Editar = new javax.swing.JMenu();
        MenuItem_Restaurar_Imagem = new javax.swing.JMenuItem();
        MenuItem_OM_BitLivre_PPM = new javax.swing.JMenuItem();
        MenuItem_EM_BitLivre_PPM = new javax.swing.JMenuItem();
        MenuItem_OM_BitLivre_PGM = new javax.swing.JMenuItem();
        MenuItem_EM_BitLivre_PGM = new javax.swing.JMenuItem();
        MenuItem_Tecnica_LSB = new javax.swing.JMenuItem();
        MenuItem_Codificar_LSB = new javax.swing.JMenuItem();
        MenuItem_Tecnica_Filtragem_Mascaramento = new javax.swing.JMenuItem();
        MenuItem_Codificar_Filtragem_Mascaramento = new javax.swing.JMenuItem();
        MenuItem_DCT = new javax.swing.JMenuItem();
        MenuItem_Codificar_DCT = new javax.swing.JMenuItem();
        MenuItem_DCT_PGM = new javax.swing.JMenuItem();
        MenuItem_Codificar_DCT_PGM = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema TCC II");

        ScrollPane_Original.setViewportView(JL_Image1);

        ScrollPane_Copia.setViewportView(JL_Image2);

        jLabel1.setText("Imagem Original");

        jLabel2.setText("Imagem Editada");

        javax.swing.GroupLayout Painel_01Layout = new javax.swing.GroupLayout(Painel_01);
        Painel_01.setLayout(Painel_01Layout);
        Painel_01Layout.setHorizontalGroup(
            Painel_01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Painel_01Layout.createSequentialGroup()
                .addGroup(Painel_01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPane_Original, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Painel_01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPane_Copia, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        Painel_01Layout.setVerticalGroup(
            Painel_01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Painel_01Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Painel_01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Painel_01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ScrollPane_Original, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
                    .addComponent(ScrollPane_Copia))
                .addContainerGap())
        );

        Menu_Arquivo.setText("Arquivo");

        MenuItem_Abrir.setText("Abrir");
        MenuItem_Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_AbrirActionPerformed(evt);
            }
        });
        Menu_Arquivo.add(MenuItem_Abrir);

        MenuItem_Salvar.setText("Salvar");
        MenuItem_Salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_SalvarActionPerformed(evt);
            }
        });
        Menu_Arquivo.add(MenuItem_Salvar);

        jMenuBar1.add(Menu_Arquivo);

        Menu_Editar.setText("Editar");

        MenuItem_Restaurar_Imagem.setText("Restaurar Imagem");
        MenuItem_Restaurar_Imagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_Restaurar_ImagemActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_Restaurar_Imagem);

        MenuItem_OM_BitLivre_PPM.setText("Ocultar Mensagem - Bit Livre - PPM");
        MenuItem_OM_BitLivre_PPM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_OM_BitLivre_PPMActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_OM_BitLivre_PPM);

        MenuItem_EM_BitLivre_PPM.setText("Extrair Mensagem - Bit Livre - PPM");
        MenuItem_EM_BitLivre_PPM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_EM_BitLivre_PPMActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_EM_BitLivre_PPM);

        MenuItem_OM_BitLivre_PGM.setText("Ocultar Mensagem - Bit Livre - PGM");
        MenuItem_OM_BitLivre_PGM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_OM_BitLivre_PGMActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_OM_BitLivre_PGM);

        MenuItem_EM_BitLivre_PGM.setText("Extrair Mensagem - Bit Livre - PGM");
        MenuItem_EM_BitLivre_PGM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_EM_BitLivre_PGMActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_EM_BitLivre_PGM);

        MenuItem_Tecnica_LSB.setText("Ocultar Mensagem - LSB");
        MenuItem_Tecnica_LSB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_Tecnica_LSBActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_Tecnica_LSB);

        MenuItem_Codificar_LSB.setText("Extrair Mensagem - LSB");
        MenuItem_Codificar_LSB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_Codificar_LSBActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_Codificar_LSB);

        MenuItem_Tecnica_Filtragem_Mascaramento.setText("Ocultar Mensagem - MSB");
        MenuItem_Tecnica_Filtragem_Mascaramento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_Tecnica_Filtragem_MascaramentoActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_Tecnica_Filtragem_Mascaramento);

        MenuItem_Codificar_Filtragem_Mascaramento.setText("Extrair Mensagem - MSB");
        MenuItem_Codificar_Filtragem_Mascaramento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_Codificar_Filtragem_MascaramentoActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_Codificar_Filtragem_Mascaramento);

        MenuItem_DCT.setText("Ocultar a Mensagem - DCT - PPM");
        MenuItem_DCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_DCTActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_DCT);

        MenuItem_Codificar_DCT.setText("Extrair Mensagem - DCT - PPM");
        MenuItem_Codificar_DCT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_Codificar_DCTActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_Codificar_DCT);

        MenuItem_DCT_PGM.setText("Ocultar Mensagem - DCT - PGM");
        MenuItem_DCT_PGM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_DCT_PGMActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_DCT_PGM);

        MenuItem_Codificar_DCT_PGM.setText("Extrair Mensagem - DCT - PGM");
        MenuItem_Codificar_DCT_PGM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuItem_Codificar_DCT_PGMActionPerformed(evt);
            }
        });
        Menu_Editar.add(MenuItem_Codificar_DCT_PGM);

        jMenuBar1.add(Menu_Editar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Painel_01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Painel_01, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuItem_AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_AbrirActionPerformed

        JFileChooser chooserArquivo = new JFileChooser(System.getProperty("user.dir") + "/Imagem");
        chooserArquivo.setFileFilter(new FileNameExtensionFilter("Imagem(.pgm,.ppm)", "pgm", "ppm"));

        int opcao = chooserArquivo.showOpenDialog(null);
        String arquivo;

        if (opcao == JFileChooser.APPROVE_OPTION) {
            arquivo = chooserArquivo.getSelectedFile().getAbsolutePath();   // endereço do arquivo

            String caminho = (chooserArquivo.getSelectedFile().getName());

            String tipo = caminho.substring(caminho.lastIndexOf("."), caminho.length());
            tipo1 = tipo;
            //System.out.println(tipo);
            JL_Image2.setIcon(null);
            if (tipo.equals(".pgm")) {
                imagem = IU_Principal.control.pgm;

                try {
                    ((ImagemPGM) imagem).lerImagemPGM(arquivo);
                    imagemOriginal = ((ImagemPGM) imagem).clone();

                    JL_Image1.setIcon(null);
                    JL_Image1.setIcon(new ImageIcon(((ImagemPGM) imagem).buffer()));
                    JL_Image2.setIcon(new ImageIcon(((ImagemPGM) imagem).buffer()));

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }

                this.Menu_Editar.setEnabled(true);
                /*this.MenuItem_Tecnica_LSB.setEnabled(false);
                this.MenuItem_Codificar_LSB.setEnabled(false);
                 */
                JOptionPane.showMessageDialog(null, "Imagem PGM aberta com sucesso! ");

            } else {
                imagem = IU_Principal.control.ppm;
                try {
                    ((ImagemPPM) imagem).lerImagemPPM(arquivo);
                    imagemOriginal = ((ImagemPPM) imagem).clone();

                    JL_Image1.setIcon(new ImageIcon(((ImagemPPM) imagem).buffer()));
                    this.Menu_Editar.setEnabled(true);

                    JL_Image2.setIcon(new ImageIcon(((ImagemPPM) imagem).buffer()));

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }

                /*this.Menu_Editar.setEnabled(true);
                this.MenuItem_Tecnica_Filtragem_Mascaramento.setEnabled(false);
                this.MenuItem_Codificar_Filtragem_Mascaramento.setEnabled(false);
                 */
                JOptionPane.showMessageDialog(null, "Imagem PPM aberta com sucesso! ");
            } // else 

        } // if opção

    }//GEN-LAST:event_MenuItem_AbrirActionPerformed

    private void MenuItem_Tecnica_LSBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_Tecnica_LSBActionPerformed
        JFileChooser chooserArquivo = new JFileChooser(System.getProperty("user.dir") + "/Texto");
        chooserArquivo.setFileFilter(new FileNameExtensionFilter("(.txt)", "txt"));
        int opcao = chooserArquivo.showOpenDialog(null);
        String arquivo;

        if (opcao == JFileChooser.APPROVE_OPTION) {
            arquivo = chooserArquivo.getSelectedFile().getAbsolutePath();   // endereço do arquivo

            String caminho = (chooserArquivo.getSelectedFile().getName());

            String tipo = caminho.substring(caminho.lastIndexOf("."), caminho.length());

            String mensagem_texto;

            if (tipo.equals(".txt")) {
                try {
                    mensagem_texto = control.Ler_Arquivo_Texto(arquivo);

                    try {
                        imagem = (ImagemPPM) control.Tecnica_LSB_PPM(imagem, mensagem_texto);
                    } catch (IOException ex) {
                        Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JL_Image2.setIcon(new ImageIcon(((ImagemPPM) imagem).buffer()));

                    JOptionPane.showMessageDialog(null, "Mensagem ocultada com sucesso! ");

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } // opcao

        /*String mensagem_texto;
        
        mensagem_texto = JOptionPane.showInputDialog("Escreva a mensagem ou texto que deseja ocultar:");
        
        try {
            imagem = (ImagemPPM) control.Tecnica_LSB_PPM(imagem, mensagem_texto);
        } catch (IOException ex) {
            Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        JL_Image2.setIcon(new ImageIcon(((ImagemPPM) imagem).buffer()));
        
       JOptionPane.showMessageDialog(null, "Mensagem ocultada com sucesso! ");*/

    }//GEN-LAST:event_MenuItem_Tecnica_LSBActionPerformed

    private void MenuItem_Restaurar_ImagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_Restaurar_ImagemActionPerformed
        if (imagemOriginal instanceof ImagemPGM) {
            JL_Image1.setIcon(null);
            JL_Image1.setIcon(new ImageIcon(((ImagemPGM) imagemOriginal).buffer()));
            JL_Image2.setIcon(null);
            JL_Image2.setIcon(new ImageIcon(((ImagemPGM) imagemOriginal).buffer()));

            imagem = ((ImagemPGM) imagemOriginal).clone();

        } else {
            JL_Image1.setIcon(null);
            JL_Image1.setIcon(new ImageIcon(((ImagemPPM) imagemOriginal).buffer()));
            JL_Image2.setIcon(null);
            JL_Image2.setIcon(new ImageIcon(((ImagemPPM) imagemOriginal).buffer()));

            imagem = ((ImagemPPM) imagemOriginal).clone();

        }
    }//GEN-LAST:event_MenuItem_Restaurar_ImagemActionPerformed

    private void MenuItem_SalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_SalvarActionPerformed
        JFileChooser chooserArquivo = new JFileChooser(System.getProperty("user.dir") + "/Imagem_Salva");

        int opcao = chooserArquivo.showSaveDialog(null);
        if (opcao == JFileChooser.APPROVE_OPTION) {
            String arquivo = chooserArquivo.getSelectedFile().getAbsolutePath();  //endereço do arquivo
            String arquivo1 = arquivo;
            if (imagem instanceof ImagemPGM) {
                arquivo += ".pgm";

                try {

                    ((ImagemPGM) imagem).salvarImagemPGM(arquivo);
                    imagemOriginal = ((ImagemPGM) imagem).clone();
                    if (op == 2) {
                        arquivo1 += ".txt";
                        ((ImagemPGM) imagem).salvarImagemA_linhaPGM(arquivo1);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                arquivo += ".ppm";
                try {
                    ((ImagemPPM) imagem).SalvarImagemPPM(arquivo);
                    imagemOriginal = ((ImagemPPM) imagem).clone();
                    if (op == 1) {
                        arquivo1 += ".txt";
                        ((ImagemPPM) imagem).SalvarImagemA_linhaPPM(arquivo1);
                    }

                } catch (IOException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            op = 0;
        }

        if (imagem instanceof ImagemPGM) {
            JL_Image1.setIcon(null);
            JL_Image1.setIcon(new ImageIcon(((ImagemPGM) imagem).buffer()));
        } else {
            JL_Image1.setIcon(null);
            JL_Image1.setIcon(new ImageIcon(((ImagemPPM) imagem).buffer()));
        }

        JOptionPane.showMessageDialog(null, "Imagem salva com sucesso!");
    }//GEN-LAST:event_MenuItem_SalvarActionPerformed

    private void MenuItem_Codificar_LSBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_Codificar_LSBActionPerformed
        String msg;
        msg = control.Codificar_LSB(imagem);
        //JOptionPane.showMessageDialog(null, "Mensagem codificada com sucesso! " + "\n" + msg);

        new IU_Caixa_de_Texto(msg).setLocationRelativeTo(null);
        new IU_Caixa_de_Texto(msg).setVisible(true);
    }//GEN-LAST:event_MenuItem_Codificar_LSBActionPerformed

    private void MenuItem_Tecnica_Filtragem_MascaramentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_Tecnica_Filtragem_MascaramentoActionPerformed
        JFileChooser chooserArquivo = new JFileChooser(System.getProperty("user.dir") + "/Texto");
        chooserArquivo.setFileFilter(new FileNameExtensionFilter("(.txt)", "txt"));
        int opcao = chooserArquivo.showOpenDialog(null);
        String arquivo;

        if (opcao == JFileChooser.APPROVE_OPTION) {
            arquivo = chooserArquivo.getSelectedFile().getAbsolutePath();   // endereço do arquivo

            String caminho = (chooserArquivo.getSelectedFile().getName());

            String tipo = caminho.substring(caminho.lastIndexOf("."), caminho.length());

            String mensagem_texto;

            if (tipo.equals(".txt")) {
                try {
                    mensagem_texto = control.Ler_Arquivo_Texto(arquivo);

                    try {
                        imagem = (ImagemPGM) control.Tecnica_Filtragem_Mascaramento_PGM(imagem, mensagem_texto);
                    } catch (IOException ex) {
                        Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JL_Image2.setIcon(new ImageIcon(((ImagemPGM) imagem).buffer()));

                    JOptionPane.showMessageDialog(null, "Mensagem ocultada com sucesso! ");

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } // opcao

        /*String mensagem_texto;
        mensagem_texto = JOptionPane.showInputDialog("Escreva a mensagem ou texto que deseja ocultar:");

        try {
            imagem = (ImagemPGM) control.Tecnica_Filtragem_Mascaramento_PGM(imagem, mensagem_texto);
        } catch (IOException ex) {
            Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        JL_Image2.setIcon(new ImageIcon(((ImagemPGM) imagem).buffer()));

        JOptionPane.showMessageDialog(null, "Mensagem ocultada com sucesso! ");*/

    }//GEN-LAST:event_MenuItem_Tecnica_Filtragem_MascaramentoActionPerformed

    private void MenuItem_Codificar_Filtragem_MascaramentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_Codificar_Filtragem_MascaramentoActionPerformed
        String msg;
        msg = control.Codificar_Filtragem_Mascaramento(imagem);
        //JOptionPane.showMessageDialog(null, "Mensagem codificada com sucesso! " + "\n" + msg);

        new IU_Caixa_de_Texto(msg).setLocationRelativeTo(null);
        new IU_Caixa_de_Texto(msg).setVisible(true);

    }//GEN-LAST:event_MenuItem_Codificar_Filtragem_MascaramentoActionPerformed

    private void MenuItem_DCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_DCTActionPerformed
        op = 1;
        JFileChooser chooserArquivo = new JFileChooser(System.getProperty("user.dir") + "/Texto");
        chooserArquivo.setFileFilter(new FileNameExtensionFilter("(.txt)", "txt"));
        int opcao = chooserArquivo.showOpenDialog(null);
        String arquivo;

        if (opcao == JFileChooser.APPROVE_OPTION) {
            arquivo = chooserArquivo.getSelectedFile().getAbsolutePath();   // endereço do arquivo

            String caminho = (chooserArquivo.getSelectedFile().getName());

            String tipo = caminho.substring(caminho.lastIndexOf("."), caminho.length());

            String mensagem_texto;

            if (tipo.equals(".txt")) {
                try {
                    mensagem_texto = control.Ler_Arquivo_Texto(arquivo);

                    /*IU_Progresso obj = new IU_Progresso(this, true);
                    obj.setLocationRelativeTo(this);
                    obj.setVisible(true);                    
                     */
                    imagem = (ImagemPPM) control.DCT_PPM(imagem, mensagem_texto);

                    //obj.dispose();
                    JL_Image2.setIcon(new ImageIcon(((ImagemPPM) imagem).buffer()));

                    JOptionPane.showMessageDialog(null, "Mensagem ocultada com sucesso! ");

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } // opcao

    }//GEN-LAST:event_MenuItem_DCTActionPerformed

    private void MenuItem_Codificar_DCTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_Codificar_DCTActionPerformed
        chooserArquivo1 = new JFileChooser(System.getProperty("user.dir") + "/Imagem_Salva");
        chooserArquivo1.setFileFilter(new FileNameExtensionFilter("Imagem_Salva(.txt)", "txt"));

        int opcao = chooserArquivo1.showOpenDialog(null);

        if (opcao == JFileChooser.APPROVE_OPTION) {
            arquivo_extrair_mensagem = chooserArquivo1.getSelectedFile().getAbsolutePath();   // endereço do arquivo
            caminho1 = (chooserArquivo1.getSelectedFile().getName());

            if (tipo1.equals(".ppm")) {
                try {
                    ((ImagemPPM) imagem).lerImagemA_linhaPPM(arquivo_extrair_mensagem);
                } catch (IOException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
        String msg;
        msg = control.Extrair_DCT(imagem);

        //JOptionPane.showMessageDialog(null, "Mensagem codificada com sucesso! " + "\n" + msg);
        new IU_Caixa_de_Texto(msg).setLocationRelativeTo(null);
        new IU_Caixa_de_Texto(msg).setVisible(true);

    }//GEN-LAST:event_MenuItem_Codificar_DCTActionPerformed

    private void MenuItem_OM_BitLivre_PPMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_OM_BitLivre_PPMActionPerformed
        JFileChooser chooserArquivo = new JFileChooser(System.getProperty("user.dir") + "/Texto");
        chooserArquivo.setFileFilter(new FileNameExtensionFilter("(.txt)", "txt"));
        int opcao = chooserArquivo.showOpenDialog(null);
        String arquivo;

        if (opcao == JFileChooser.APPROVE_OPTION) {
            arquivo = chooserArquivo.getSelectedFile().getAbsolutePath();   // endereço do arquivo

            String caminho = (chooserArquivo.getSelectedFile().getName());

            String tipo = caminho.substring(caminho.lastIndexOf("."), caminho.length());

            String mensagem_texto;

            if (tipo.equals(".txt")) {
                try {
                    mensagem_texto = control.Ler_Arquivo_Texto(arquivo);

                    /*new IU_Caixa_de_Opcoes().setLocationRelativeTo(null);
                    new IU_Caixa_de_Opcoes().setVisible(true);
                    posicao = controle.pos ;
                     */
                    String posbit;
                    do {
                        int cont = 0;
                        do {
                            posbit = JOptionPane.showInputDialog("Escolha a posição do bit na imagem entre [2,7]");
                            for (int i = 0; i < posbit.length(); i++) {
                                if (Character.isLetter(posbit.charAt(i)) == true) {
                                    cont = 1;
                                    break;
                                } else {
                                    if (Character.isDigit(posbit.charAt(i)) == true) {
                                        cont = 0;
                                    } else {
                                        cont = 1;
                                        break;
                                    }

                                }
                            }
                        } while (cont != 0);

                        posicao = Integer.parseInt(posbit);

                    } while ((posicao < 2) || (posicao > 7));

                    try {
                        imagem = (ImagemPPM) control.Ocultar_Mensagem_BitLivre_PPM(imagem, mensagem_texto, posicao);
                    } catch (IOException ex) {
                        Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JL_Image2.setIcon(new ImageIcon(((ImagemPPM) imagem).buffer()));

                    JOptionPane.showMessageDialog(null, "Mensagem ocultada com sucesso! ");

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } // opcao
    }//GEN-LAST:event_MenuItem_OM_BitLivre_PPMActionPerformed

    private void MenuItem_EM_BitLivre_PPMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_EM_BitLivre_PPMActionPerformed
        String msg;
        String posbit;
        do {
            int cont = 0;
            do {
                posbit = JOptionPane.showInputDialog("Escolha a posição do bit na imagem entre [2,7]");
                for (int i = 0; i < posbit.length(); i++) {
                    if (Character.isLetter(posbit.charAt(i)) == true) {
                        cont = 1;
                        break;
                    } else {
                        if (Character.isDigit(posbit.charAt(i)) == true) {
                            cont = 0;
                        } else {
                            cont = 1;
                            break;
                        }
                    }
                }
            } while (cont != 0);

            extrair_posicao = Integer.parseInt(posbit);

            //System.out.println("posicao = " + extrair_posicao);
        } while ((extrair_posicao < 2) || (extrair_posicao > 7));

        msg = control.Extrair_Mensagem_BitLivre_PPM(imagem, extrair_posicao);
        //JOptionPane.showMessageDialog(null, "Mensagem codificada com sucesso! " + "\n" + msg);

        new IU_Caixa_de_Texto(msg).setLocationRelativeTo(null);
        new IU_Caixa_de_Texto(msg).setVisible(true);

    }//GEN-LAST:event_MenuItem_EM_BitLivre_PPMActionPerformed

    private void MenuItem_OM_BitLivre_PGMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_OM_BitLivre_PGMActionPerformed
        JFileChooser chooserArquivo = new JFileChooser(System.getProperty("user.dir") + "/Texto");
        chooserArquivo.setFileFilter(new FileNameExtensionFilter("(.txt)", "txt"));
        int opcao = chooserArquivo.showOpenDialog(null);
        String arquivo;

        if (opcao == JFileChooser.APPROVE_OPTION) {
            arquivo = chooserArquivo.getSelectedFile().getAbsolutePath();   // endereço do arquivo

            String caminho = (chooserArquivo.getSelectedFile().getName());

            String tipo = caminho.substring(caminho.lastIndexOf("."), caminho.length());

            String mensagem_texto;

            if (tipo.equals(".txt")) {
                try {
                    mensagem_texto = control.Ler_Arquivo_Texto(arquivo);

                    /*new IU_Caixa_de_Opcoes().setLocationRelativeTo(null);
                    new IU_Caixa_de_Opcoes().setVisible(true);
                    posicao = controle.pos ;
                     */
                    String posbit;
                    do {
                        int cont = 0;
                        do {
                            posbit = JOptionPane.showInputDialog("Escolha a posição do bit na imagem entre [2,7]");
                            for (int i = 0; i < posbit.length(); i++) {
                                if (Character.isLetter(posbit.charAt(i)) == true) {
                                    cont = 1;
                                    break;
                                } else {
                                    if (Character.isDigit(posbit.charAt(i)) == true) {
                                        cont = 0;
                                    } else {
                                        cont = 1;
                                        break;
                                    }

                                }
                            }
                        } while (cont != 0);

                        posicao = Integer.parseInt(posbit);

                    } while ((posicao < 2) || (posicao > 7));

                    try {
                        imagem = (ImagemPGM) control.Ocultar_Mensagem_BitLivre_PGM(imagem, mensagem_texto, posicao);
                    } catch (IOException ex) {
                        Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JL_Image2.setIcon(new ImageIcon(((ImagemPGM) imagem).buffer()));

                    JOptionPane.showMessageDialog(null, "Mensagem ocultada com sucesso! ");

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } // opcao
    }//GEN-LAST:event_MenuItem_OM_BitLivre_PGMActionPerformed

    private void MenuItem_EM_BitLivre_PGMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_EM_BitLivre_PGMActionPerformed
        String msg;
        String posbit;
        do {
            int cont = 0;
            do {
                posbit = JOptionPane.showInputDialog("Escolha a posição do bit na imagem entre [2,7]");
                for (int i = 0; i < posbit.length(); i++) {
                    if (Character.isLetter(posbit.charAt(i)) == true) {
                        cont = 1;
                        break;
                    } else {
                        if (Character.isDigit(posbit.charAt(i)) == true) {
                            cont = 0;
                        } else {
                            cont = 1;
                            break;
                        }
                    }
                }
            } while (cont != 0);

            extrair_posicao = Integer.parseInt(posbit);

            //System.out.println("posicao = " + extrair_posicao);
        } while ((extrair_posicao < 2) || (extrair_posicao > 7));

        msg = control.Extrair_Mensagem_BitLivre_PGM(imagem, extrair_posicao);
        //JOptionPane.showMessageDialog(null, "Mensagem codificada com sucesso! " + "\n" + msg);

        new IU_Caixa_de_Texto(msg).setLocationRelativeTo(null);
        new IU_Caixa_de_Texto(msg).setVisible(true);
    }//GEN-LAST:event_MenuItem_EM_BitLivre_PGMActionPerformed

    private void MenuItem_DCT_PGMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_DCT_PGMActionPerformed
        op = 2;
        JFileChooser chooserArquivo = new JFileChooser(System.getProperty("user.dir") + "/Texto");
        chooserArquivo.setFileFilter(new FileNameExtensionFilter("(.txt)", "txt"));
        int opcao = chooserArquivo.showOpenDialog(null);
        String arquivo;

        if (opcao == JFileChooser.APPROVE_OPTION) {
            arquivo = chooserArquivo.getSelectedFile().getAbsolutePath();   // endereço do arquivo

            String caminho = (chooserArquivo.getSelectedFile().getName());

            String tipo = caminho.substring(caminho.lastIndexOf("."), caminho.length());

            String mensagem_texto;

            if (tipo.equals(".txt")) {
                try {
                    mensagem_texto = control.Ler_Arquivo_Texto(arquivo);

                    imagem = (ImagemPGM) control.DCT_PGM(imagem, mensagem_texto);

                    JL_Image2.setIcon(new ImageIcon(((ImagemPGM) imagem).buffer()));

                    JOptionPane.showMessageDialog(null, "Mensagem ocultada com sucesso! ");

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        } // opcao
    }//GEN-LAST:event_MenuItem_DCT_PGMActionPerformed

    private void MenuItem_Codificar_DCT_PGMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuItem_Codificar_DCT_PGMActionPerformed
        chooserArquivo1 = new JFileChooser(System.getProperty("user.dir") + "/Imagem_Salva");
        chooserArquivo1.setFileFilter(new FileNameExtensionFilter("Imagem_Salva(.txt)", "txt"));

        int opcao = chooserArquivo1.showOpenDialog(null);

        if (opcao == JFileChooser.APPROVE_OPTION) {
            arquivo_extrair_mensagem = chooserArquivo1.getSelectedFile().getAbsolutePath();   // endereço do arquivo
            caminho1 = (chooserArquivo1.getSelectedFile().getName());

            if (tipo1.equals(".pgm")) {
                try {
                    ((ImagemPGM) imagem).lerImagemA_linhaPGM(arquivo_extrair_mensagem);
                } catch (IOException ex) {
                    Logger.getLogger(IU_Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

        String msg;
        msg = control.Extrair_DCT_PGM(imagem);

        new IU_Caixa_de_Texto(msg).setLocationRelativeTo(null);
        new IU_Caixa_de_Texto(msg).setVisible(true);
    }//GEN-LAST:event_MenuItem_Codificar_DCT_PGMActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IU_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IU_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IU_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IU_Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IU_Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JL_Image1;
    private javax.swing.JLabel JL_Image2;
    private javax.swing.JMenuItem MenuItem_Abrir;
    private javax.swing.JMenuItem MenuItem_Codificar_DCT;
    private javax.swing.JMenuItem MenuItem_Codificar_DCT_PGM;
    private javax.swing.JMenuItem MenuItem_Codificar_Filtragem_Mascaramento;
    private javax.swing.JMenuItem MenuItem_Codificar_LSB;
    private javax.swing.JMenuItem MenuItem_DCT;
    private javax.swing.JMenuItem MenuItem_DCT_PGM;
    private javax.swing.JMenuItem MenuItem_EM_BitLivre_PGM;
    private javax.swing.JMenuItem MenuItem_EM_BitLivre_PPM;
    private javax.swing.JMenuItem MenuItem_OM_BitLivre_PGM;
    private javax.swing.JMenuItem MenuItem_OM_BitLivre_PPM;
    private javax.swing.JMenuItem MenuItem_Restaurar_Imagem;
    private javax.swing.JMenuItem MenuItem_Salvar;
    private javax.swing.JMenuItem MenuItem_Tecnica_Filtragem_Mascaramento;
    private javax.swing.JMenuItem MenuItem_Tecnica_LSB;
    private javax.swing.JMenu Menu_Arquivo;
    private javax.swing.JMenu Menu_Editar;
    private javax.swing.JPanel Painel_01;
    private javax.swing.JScrollPane ScrollPane_Copia;
    private javax.swing.JScrollPane ScrollPane_Original;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    // End of variables declaration//GEN-END:variables
}
